#!/usr/bin/env python3
import argparse
import datetime
import json
import os
import random
import shutil
import string
import sys
from typing import List
from typing import Optional
from typing import TypedDict


RSS_FEED_HEADER = """\
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Daily Photo</title>
  <link rel="self" href="https://daily.photo"/>
  <updated>{date}</updated>
  <author>
    <name>Jake Kaufman</name>
    <email>me@jake.computer</email>
  </author>
  <id>https://daily.photo/</id>
"""

RSS_FEED_ENTRY = """
  <entry>
    <title>{title}</title>
    <link href="{link}"/>
    <id>{link}</id>
    <summary type="html">
        &lt;img src="{img_link}" title="{alt}" alt="{alt}" /&gt;
    </summary>
    <updated>{date}</updated>
  </entry>
"""

RSS_FEED_TRAILER = '\n</feed>\n'


def format_filename(output_dir: str, day: datetime.datetime) -> str:
    return os.path.join(output_dir, f'{day.strftime("%Y%m%d")}.html')


class TemplateSubstitutions(TypedDict):
    yesterday: str
    tomorrow: str
    image: str
    alt: str
    subtitle: str
    date: str
    shot_date: str
    camera: str
    film: str


def generate_html(
    template_filename: str,
    data: TemplateSubstitutions,
    output_filename: str,
) -> None:
    with open(template_filename) as f:
        daily_template = string.Template(''.join(f.readlines()))

    # TODO check that this fully substituted or use better templating
    html_content = daily_template.substitute(data)

    with open(output_filename, 'w') as f:
        f.write(html_content)


def photo_date(date: str) -> str:
    if not date:
        return ''
    return datetime.datetime.strptime(date, '%Y%m%d').strftime('%B %d, %Y')


def generate_day(
    *,
    today: datetime.datetime,
    image: str,
    metadata_file: str,
    template: str,
    index: bool,
    no_next: bool,
    no_prev: bool,
    output_dir: str,
) -> str:
    yesterday = today - datetime.timedelta(days=1)
    tomorrow = today + datetime.timedelta(days=1)

    with open(metadata_file) as f:
        metadata = json.load(f)

    if no_prev:
        yesterday_text = '&lt;-'
    else:
        yesterday_text = '<a href="{}">&lt;-</a>'.format(
            format_filename('/', yesterday),
        )

    if no_next or index:
        tomorrow_text = '-&gt;'
    else:
        tomorrow_text = '<a href="{}">-&gt;</a>'.format(
            format_filename('/', tomorrow),
        )

    if index:
        output_name = os.path.join(output_dir, 'index.html')
    else:
        output_name = format_filename(output_dir, today)

    try:
        shot_date = photo_date(metadata.get('date'))
    except ValueError:
        print(f'Unable to parse {metadata_file} date: {metadata.get("date")}')
        # TODO: error handling shouldn't be immediate exit. need to better
        # collect and bubble errors
        sys.exit(1)

    generate_html(
        template,
        {
            'yesterday': yesterday_text,
            'tomorrow': tomorrow_text,
            'image': f'images/{os.path.basename(image)}',
            'alt': metadata['alt'],
            'subtitle': metadata['subtitle'],
            'date': today.strftime('%B %d, %Y'),
            'shot_date': shot_date,
            'camera': metadata.get('camera', ''),
            'film': metadata.get('film', ''),
        },
        output_name,
    )

    return RSS_FEED_ENTRY.format(
        title=metadata['subtitle'],
        link=f'https://daily.photo/{today.strftime("%Y%m%d")}.html',
        date=today.isoformat() + 'Z',  # TODO fix the TZs
        alt=metadata['alt'],
        img_link=f'https://daily.photo/images/{os.path.basename(image)}',
    )


def get_metadata_filename(metadata_dir: str, image: str) -> str:
    return os.path.join(
        metadata_dir,
        os.path.splitext(os.path.basename(image))[0] + '.json',
    )


def choose_new(date: str) -> str:
    """
    Returns an image in converted/
    """
    # get a list of image files
    new_image = random.choice(
        [image for image in os.listdir('converted') if image[-4:] != 'json'],
    )
    return new_image


def main(argv: Optional[List[str]] = None) -> int:
    parser = argparse.ArgumentParser(description='generate todays pic site')
    parser.add_argument(
        '--config',
        help='Path to config file. defaults to ./config.json',
    )
    parser.add_argument(
        '--new',
        help='Choose and add new from converted/ for YYYYMMDD',
    )
    parser.add_argument(
        '--image',
        help='Optional. If passed, use a specific image instead of random.',
    )
    args = parser.parse_args(argv)

    # constant metadata
    config_file = args.config or 'config.json'
    config = json.load(open(config_file))
    output_dir = config['output_dir']
    template = config['template']
    metadata_dir = config['metadata_dir']

    if args.new:
        if os.path.exists(f'{output_dir}/{args.new}.html'):
            print(f'{args.new} already exists!')
            return 1

        if args.image is None:
            new_image = choose_new(args.new)
        else:
            new_image = os.path.basename(args.image)

        # TODO this should only move if necessary to make this more re-runnable
        metadata_file = get_metadata_filename(metadata_dir, new_image)
        shutil.move(
            f'converted/{new_image}',
            f'{output_dir}/images/{new_image}',
        )
        shutil.move(
            f'converted/{os.path.basename(metadata_file)}',
            metadata_file,
        )
        config['dates'].append([args.new, new_image])
        with open(config_file, 'w') as c:
            json.dump(config, c, sort_keys=True, indent=2)
            c.write('\n')

    no_prev = True
    no_next = False
    rss_feed = RSS_FEED_HEADER.format(
        date=datetime.datetime.now().isoformat() + 'Z',
    )

    for date in config['dates']:
        today = datetime.datetime.strptime(date[0], '%Y%m%d')
        image = date[1]
        metadata_file = get_metadata_filename(metadata_dir, image)

        if config['dates'][-1] == date:
            # Last day we need to generate the index and no anchor
            no_next = True
            generate_day(
                today=today,
                image=image,
                index=True,
                metadata_file=metadata_file,
                no_next=no_next,
                no_prev=no_prev,
                template=template,
                output_dir=output_dir,
            )

        rss_feed += generate_day(
            today=today,
            image=image,
            index=False,
            metadata_file=metadata_file,
            no_next=no_next,
            no_prev=no_prev,
            template=template,
            output_dir=output_dir,
        )

        if no_prev:
            # only true on first go around
            no_prev = False

    rss_feed += RSS_FEED_TRAILER
    with open(f'{output_dir}/rss.xml', 'w') as rss:
        rss.write(rss_feed)

    return 0


if __name__ == '__main__':
    exit(main())
