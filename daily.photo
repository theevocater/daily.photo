#!/usr/bin/env python3
import argparse
import datetime
import json
import os
import random
import shutil
import string
import sys
from typing import Any
from typing import List
from typing import Optional
from typing import TypedDict

UNUSED_IMAGES = 'converted'
IMAGES = 'current/images'
METADATA_DIR = 'current/metadata'
OUTPUT_DIR = 'generated'
OUTPUT_IMAGES = 'images'
TEMPLATE = 'template.html'

RSS_FEED_HEADER = """\
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Daily Photo</title>
  <link rel="self" href="https://daily.photo"/>
  <updated>{date}</updated>
  <author>
    <name>Jake Kaufman</name>
    <email>me@jake.computer</email>
  </author>
  <id>https://daily.photo/</id>
"""

RSS_FEED_ENTRY = """
  <entry>
    <title>{title}</title>
    <link href="{link}"/>
    <id>{link}</id>
    <summary type="html">
        &lt;img src="{img_link}" title="{alt}" alt="{alt}" /&gt;
    </summary>
    <updated>{date}</updated>
  </entry>
"""

RSS_FEED_TRAILER = '\n</feed>\n'


def format_filename(output_dir: str, day: datetime.datetime) -> str:
    return os.path.join(output_dir, f'{day.strftime("%Y%m%d")}.html')


class TemplateSubstitutions(TypedDict):
    yesterday: str
    tomorrow: str
    image: str
    alt: str
    subtitle: str
    date: str
    shot_date: str
    camera: str
    film: str


def generate_html(
    template_filename: str,
    data: TemplateSubstitutions,
    output_filename: str,
) -> None:
    with open(template_filename) as f:
        daily_template = string.Template(''.join(f.readlines()))

    # TODO check that this fully substituted or use better templating
    html_content = daily_template.substitute(data)

    with open(output_filename, 'w') as f:
        f.write(html_content)


def photo_date(date: str) -> str:
    if not date:
        return ''
    return datetime.datetime.strptime(date, '%Y%m%d').strftime('%B %d, %Y')


def rss_date(date: datetime.datetime) -> str:
    """
    Return a ISO3601 UTC date without external library
    """
    return date.isoformat() + 'Z'


def generate_day(
    *,
    today: datetime.datetime,
    image: str,
    metadata_file: str,
    template: str,
    index: bool,
    no_next: bool,
    no_prev: bool,
    output_dir: str,
) -> str:
    if index:
        output_name = os.path.join(output_dir, 'index.html')
    else:
        output_name = format_filename(output_dir, today)

    print(f'Generating {output_name}')

    yesterday = today - datetime.timedelta(days=1)
    tomorrow = today + datetime.timedelta(days=1)

    with open(metadata_file) as f:
        metadata = json.load(f)

    if no_prev:
        yesterday_text = '&lt;-'
    else:
        yesterday_text = '<a href="{}">&lt;-</a>'.format(
            format_filename('/', yesterday),
        )

    if no_next or index:
        tomorrow_text = '-&gt;'
    else:
        tomorrow_text = '<a href="{}">-&gt;</a>'.format(
            format_filename('/', tomorrow),
        )

    try:
        shot_date = photo_date(metadata.get('date'))
    except ValueError:
        print(f'Unable to parse {metadata_file} date: {metadata.get("date")}')
        # TODO: error handling shouldn't be immediate exit. need to better
        # collect and bubble errors
        sys.exit(1)

    # symlink this days image to the output directory
    intput_image = os.path.join('..', '..', IMAGES, image)
    output_image = os.path.join(output_dir, OUTPUT_IMAGES, image)
    if not os.path.exists(output_image):
        if os.path.lexists(output_image):
            # fix broken links
            os.remove(output_image)
        os.symlink(intput_image, output_image)

    generate_html(
        template,
        {
            'yesterday': yesterday_text,
            'tomorrow': tomorrow_text,
            'image': os.path.join(OUTPUT_IMAGES, image),
            'alt': metadata['alt'],
            'subtitle': metadata['subtitle'],
            'date': today.strftime('%B %d, %Y'),
            'shot_date': shot_date,
            'camera': metadata.get('camera', ''),
            'film': metadata.get('film', ''),
        },
        output_name,
    )

    if index:
        # index isn't included in the RSS feed
        return ''

    return RSS_FEED_ENTRY.format(
        title=metadata['subtitle'],
        link=f'https://daily.photo/{today.strftime("%Y%m%d")}.html',
        date=rss_date(today),
        alt=metadata['alt'],
        img_link=f'https://daily.photo/{OUTPUT_IMAGES}/{image}',
    )


def get_metadata_filename(metadata_dir: str, image: str) -> str:
    return os.path.join(
        metadata_dir,
        os.path.splitext(os.path.basename(image))[0] + '.json',
    )


def setup_output_dir(output_dir: str) -> bool:
    """
    Creates the output dir and links base files like CSS
    """
    if not os.path.exists(output_dir):
        print(f'Creating {output_dir}')
        os.mkdir(output_dir)

    images = os.path.join(output_dir, OUTPUT_IMAGES)
    if not os.path.exists(images):
        print(f'Creating {images}')
        os.mkdir(images)

    cname = f'{output_dir}/CNAME'
    if not os.path.exists(cname):
        print(f'Creating {cname}')
        os.symlink('../CNAME', cname)

    main_css = f'{output_dir}/main.css'
    if not os.path.exists(main_css):
        print(f'Creating {main_css}')
        os.symlink('../main.css', main_css)

    return True


def generate(
    *,
    config_file: str,
) -> int:
    config = json.load(open(config_file))
    print('Generating site')
    if not setup_output_dir(OUTPUT_DIR):
        return 1

    rss_feed = RSS_FEED_HEADER.format(
        date=rss_date(datetime.datetime.now()),
    )

    no_prev = True
    no_next = False
    for date, image in config['dates']:
        today = datetime.datetime.strptime(date, '%Y%m%d')
        metadata_file = get_metadata_filename(METADATA_DIR, image)

        if config['dates'][-1][0] == date:
            # Last day we need to generate the index and no anchor
            # The index isn't included in the RSS feed
            no_next = True
            generate_day(
                today=today,
                image=image,
                index=True,
                metadata_file=metadata_file,
                no_next=no_next,
                no_prev=no_prev,
                template=TEMPLATE,
                output_dir=OUTPUT_DIR,
            )

        rss_feed += generate_day(
            today=today,
            image=image,
            index=False,
            metadata_file=metadata_file,
            no_next=no_next,
            no_prev=no_prev,
            template=TEMPLATE,
            output_dir=OUTPUT_DIR,
        )

        if no_prev:
            # only true on first go around
            no_prev = False

    rss_feed += RSS_FEED_TRAILER
    rss_file = os.path.join(OUTPUT_DIR, 'rss.xml')
    print(f'Writing {rss_file}')
    with open(rss_file, 'w') as rss:
        rss.write(rss_feed)

    return 0


def new(
    *,
    new_date: str,
    new_image: Optional[str],
    config_file: str,
) -> int:
    """
    Choose and move a new image to IMAGES
    """
    config = json.load(open(config_file))
    # Detect if a date or image has been used before
    for date, image in config['dates']:
        if date == new_date:
            print(f'Error: already have an image for {new_date}')
            return 1
        if new_image and image == new_image:
            print(f'Error: {new_image} was already used on {date}')
            return 1

    if new_image is None:
        new_image = random.choice(
            [
                image
                for image in os.listdir(
                    UNUSED_IMAGES,
                )
                if image[-4:] != 'json'
            ],
        )
    else:
        new_image = os.path.basename(new_image)

    old_image_path = os.path.join(UNUSED_IMAGES, new_image)
    new_image_path = os.path.join(IMAGES, new_image)
    if not os.path.exists(old_image_path):
        print(f'Error: {old_image_path} does not exist')
        return 1

    new_metadata_file = get_metadata_filename(METADATA_DIR, new_image)
    old_metadata_file = os.path.join(
        UNUSED_IMAGES,
        os.path.basename(new_metadata_file),
    )
    if not os.path.exists(old_metadata_file):
        print(f'Error: {old_metadata_file} does not exist')
        return 1

    print(f'Moving {old_image_path} to {new_image_path}')
    shutil.move(old_image_path, new_image_path)

    print(f'Moving {old_metadata_file} to {new_metadata_file}')
    shutil.move(old_metadata_file, new_metadata_file)

    config['dates'].append([new_date, new_image])
    print(f'Writing {config_file}')
    with open(config_file, 'w') as c:
        json.dump(config, c, sort_keys=True, indent=2)
        # json module doesn't write a trailing newline by default
        c.write(os.linesep)

    print(f'Added {new_date}: {new_image}')
    return 0


def valid_str(value: Any) -> bool:
    return isinstance(value, str) and len(value) > 0


def valid_date(value: Any) -> bool:
    if not isinstance(value, str):
        return False
    day = value
    if len(day) != 8:
        return False
    try:
        datetime.datetime.strptime(day, '%Y%m%d')
    except ValueError:
        return False
    return True


def validate(*, config_file: str) -> int:
    try:
        with open(config_file) as c:
            config = json.load(c)
    except (FileNotFoundError, json.decoder.JSONDecodeError) as e:
        print(f'Unable to load config_file: {config_file}.', e)
        return 1

    dates = config.get('dates', None)

    if dates is None or len(dates) == 0:
        print('No dates set in config')
        return 1

    metadata_keys = {
        'alt': valid_str,
        'camera': valid_str,
        'date': valid_date,
        'film': valid_str,
        'subtitle': valid_str,
    }

    ret = 0
    for date in dates:
        if len(date) != 2:
            print(f'Entry {date} has the wrong number of fields')
            ret += 1

        day = date[0]
        if not valid_date(day):
            print(f'Entry {date} unable to parse date {day}')
            ret += 1

        image = date[1]

        if not os.path.exists(os.path.join(IMAGES, image)):
            print(f'Entry {date}: {image} missing jpg')
            ret += 1

        metadata_file = get_metadata_filename(METADATA_DIR, image)
        try:
            with open(metadata_file) as md:
                metadata = json.load(md)
        except (FileNotFoundError, json.decoder.JSONDecodeError) as e:
            ret += 1
            print(f'Entry {date} unable to load {metadata_file}: ', e)
            continue

        for key, validator in metadata_keys.items():
            if key not in metadata:
                print(f'{metadata_file} missing key "{key}"')
                ret += 1
                continue

            if not validator(metadata[key]):
                print(
                    f'{metadata_file} unable to validate'
                    f': {key} -> {metadata[key]}',
                )
                ret += 1
            del metadata[key]

        if len(metadata) > 0:
            print(f'{metadata_file} has extra keys {metadata.keys()}')
            ret += 1

    return ret


def main(argv: Optional[List[str]] = None) -> int:
    parser = argparse.ArgumentParser(description='generate todays pic site')
    parser.add_argument(
        '--config-file',
        help='Path to config file. defaults to ./config.json',
        default='config.json',
    )
    subparsers = parser.add_subparsers(dest='function')
    sp = subparsers.add_parser(
        'generate',
        help='default: Generate static site suitable for gh pages',
    )

    sp = subparsers.add_parser(
        'new',
        help=f'choose and add new image from {UNUSED_IMAGES} for YYYYMMDD',
    )
    sp.add_argument(
        'new_date',
        metavar='date',
        help='YYYYMMDD to add new image',
    )
    sp.add_argument(
        '--image',
        dest='new_image',
        help='optional. if passed, use a specific image instead of random',
    )

    sp = subparsers.add_parser(
        'validate',
        help='validate config.json',
    )
    args = parser.parse_args(argv)

    if args.function == 'new':
        return new(
            new_date=args.date,
            new_image=args.image,
            config_file=args.config_file,
        )
    elif args.function == 'validate':
        return validate(config_file=args.config_file)
    else:
        return generate(config_file=args.config_file)


if __name__ == '__main__':
    exit(main())
